Using username "rafael".
rafael@192.168.0.21's password:
Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.8.0-59-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

3 updates can be applied immediately.
Para ver as actualizações adicionais corre o comando: apt list --upgradable

Your Hardware Enablement Stack (HWE) is supported until April 2025.
Last login: Sun Jun 27 00:17:16 2021 from 192.168.0.10
rafael@Niflheim:~$ cd terraform
rafael@Niflheim:~/terraform$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v3.47.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
rafael@Niflheim:~/terraform$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.Windows2019 will be created
  + resource "aws_instance" "Windows2019" {
      + ami                                  = "ami-077f1edd46ddb3129"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "my-key"
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "allow_rdp",
          + "allow_winrm_http",
          + "allow_winrm_https",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Windows2019"
        }
      + tags_all                             = {
          + "Name" = "Windows2019"
        }
      + tenancy                              = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_key_pair.my-key will be created
  + resource "aws_key_pair" "my-key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "my-key"
      + key_pair_id = (known after apply)
      + public_key  = <<-EOT
            ---- BEGIN SSH2 PUBLIC KEY ----
            Comment: "imported-openssh-key"
            AAAAB3NzaC1yc2EAAAADAQABAAABAQDHxooM0neA5Dvcuvb8tEGKCtZY4Rl26m7F
            9jPSdX+oeu1Dr7WHC6agQdUTzzUGjXjNzfr/UxpJUrm3qJtmcWRDKU/jnoYmp7Nx
            z/ug+/CxFeVaC+Heax+TI0XvZX6If9YjwkRUvJoOc05+tdocvcoXfaoY0evwX0Cm
            6HEt5ypbgoyuPcNleQnb2xvtNK4fvdUxlUxg+5whlIB61tGsv5URJAM3xRfZeME7
            xDSzLPmrZEssJqhQ1khxrKxtwX02HCthji+JExHJVodQO5dk+tJbjQ2gAjz7PKfF
            mmOULjTtVoY1LN5JCeTfjRvVtiN5EET64jHOxa1pWjr6Ab3PGT65
            ---- END SSH2 PUBLIC KEY ----
        EOT
      + tags_all    = (known after apply)
    }

  # aws_security_group.allow_rdp will be created
  + resource "aws_security_group" "allow_rdp" {
      + arn                    = (known after apply)
      + description            = "Allow rdp porta 3389"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "rdp"
              + from_port        = 3389
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3389
            },
        ]
      + name                   = "allow_rdp"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_rdp"
        }
      + tags_all               = {
          + "Name" = "allow_rdp"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.allow_winrm_http will be created
  + resource "aws_security_group" "allow_winrm_http" {
      + arn                    = (known after apply)
      + description            = "Allow WinRM porta 5985 http"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "wimrm"
              + from_port        = 5985
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5985
            },
        ]
      + name                   = "allow_winrm_http"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_winrm_http"
        }
      + tags_all               = {
          + "Name" = "allow_winrm_http"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.allow_winrm_https will be created
  + resource "aws_security_group" "allow_winrm_https" {
      + arn                    = (known after apply)
      + description            = "Allow WinRM porta 5986 https"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "wimrm"
              + from_port        = 5986
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5986
            },
        ]
      + name                   = "allow_winrm_https"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_winrm_https"
        }
      + tags_all               = {
          + "Name" = "allow_winrm_https"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + Windows2019_public_dns = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
rafael@Niflheim:~/terraform$ cat main.tf
provider "aws" {
  profile = "devops"
  region  = "us-east-1"
  shared_credentials_file = "/home/rafael/.aws/credentials"
}

resource "aws_instance" "Windows2019" {
  ami           = "ami-077f1edd46ddb3129"
  instance_type = "t2.micro"
  key_name = "${aws_key_pair.my-key.key_name}"
  security_groups = ["${aws_security_group.allow_winrm_http.name}","${aws_security_group.allow_winrm_https.name}","${aws_security_group.allow_rdp.name}"]
  tags = {
    Name = "Windows2019"
  }
}

resource "aws_key_pair" "my-key" {
  key_name = "my-key"
  public_key = "${file("/home/rafael/terraform/aws.pub")}"

}

resource "aws_security_group" "allow_winrm_http" {
  name        = "allow_winrm_http"
  description = "Allow WinRM porta 5985 http"

  ingress {
    description      = "wimrm"
    from_port        = 5985
    to_port          = 5985
    protocol         = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = -1
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_winrm_http"
  }
}

resource "aws_security_group" "allow_winrm_https" {
  name        = "allow_winrm_https"
  description = "Allow WinRM porta 5986 https"

  ingress {
    description      = "wimrm"
    from_port        = 5986
    to_port          = 5986
    protocol         = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = -1
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_winrm_https"
  }
}

resource "aws_security_group" "allow_rdp" {
  name        = "allow_rdp"
  description = "Allow rdp porta 3389"

  ingress {
    description      = "rdp"
    from_port        = 3389
    to_port          = 3389
    protocol         = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = -1
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "allow_rdp"
  }
}

output "Windows2019_public_dns" {
  value = "${aws_instance.Windows2019.public_dns}"
}rafael@Niflheim:~/terraform$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.Windows2019 will be created
  + resource "aws_instance" "Windows2019" {
      + ami                                  = "ami-077f1edd46ddb3129"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "my-key"
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "allow_rdp",
          + "allow_winrm_http",
          + "allow_winrm_https",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Windows2019"
        }
      + tags_all                             = {
          + "Name" = "Windows2019"
        }
      + tenancy                              = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_key_pair.my-key will be created
  + resource "aws_key_pair" "my-key" {
      + arn         = (known after apply)
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "my-key"
      + key_pair_id = (known after apply)
      + public_key  = <<-EOT
            ---- BEGIN SSH2 PUBLIC KEY ----
            Comment: "imported-openssh-key"
            AAAAB3NzaC1yc2EAAAADAQABAAABAQDHxooM0neA5Dvcuvb8tEGKCtZY4Rl26m7F
            9jPSdX+oeu1Dr7WHC6agQdUTzzUGjXjNzfr/UxpJUrm3qJtmcWRDKU/jnoYmp7Nx
            z/ug+/CxFeVaC+Heax+TI0XvZX6If9YjwkRUvJoOc05+tdocvcoXfaoY0evwX0Cm
            6HEt5ypbgoyuPcNleQnb2xvtNK4fvdUxlUxg+5whlIB61tGsv5URJAM3xRfZeME7
            xDSzLPmrZEssJqhQ1khxrKxtwX02HCthji+JExHJVodQO5dk+tJbjQ2gAjz7PKfF
            mmOULjTtVoY1LN5JCeTfjRvVtiN5EET64jHOxa1pWjr6Ab3PGT65
            ---- END SSH2 PUBLIC KEY ----
        EOT
      + tags_all    = (known after apply)
    }

  # aws_security_group.allow_rdp will be created
  + resource "aws_security_group" "allow_rdp" {
      + arn                    = (known after apply)
      + description            = "Allow rdp porta 3389"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "rdp"
              + from_port        = 3389
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3389
            },
        ]
      + name                   = "allow_rdp"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_rdp"
        }
      + tags_all               = {
          + "Name" = "allow_rdp"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.allow_winrm_http will be created
  + resource "aws_security_group" "allow_winrm_http" {
      + arn                    = (known after apply)
      + description            = "Allow WinRM porta 5985 http"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "wimrm"
              + from_port        = 5985
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5985
            },
        ]
      + name                   = "allow_winrm_http"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_winrm_http"
        }
      + tags_all               = {
          + "Name" = "allow_winrm_http"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.allow_winrm_https will be created
  + resource "aws_security_group" "allow_winrm_https" {
      + arn                    = (known after apply)
      + description            = "Allow WinRM porta 5986 https"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "wimrm"
              + from_port        = 5986
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 5986
            },
        ]
      + name                   = "allow_winrm_https"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_winrm_https"
        }
      + tags_all               = {
          + "Name" = "allow_winrm_https"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + Windows2019_public_dns = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_key_pair.my-key: Creating...
aws_security_group.allow_winrm_http: Creating...
aws_security_group.allow_rdp: Creating...
aws_security_group.allow_winrm_https: Creating...
aws_key_pair.my-key: Creation complete after 1s [id=my-key]
aws_security_group.allow_rdp: Creation complete after 6s [id=sg-0a403cba2903ea6a6]
aws_security_group.allow_winrm_https: Creation complete after 6s [id=sg-04091e1c369ea30fc]
aws_security_group.allow_winrm_http: Creation complete after 7s [id=sg-077a159bc9a89828f]
aws_instance.Windows2019: Creating...
aws_instance.Windows2019: Still creating... [10s elapsed]
aws_instance.Windows2019: Still creating... [20s elapsed]
aws_instance.Windows2019: Still creating... [30s elapsed]
aws_instance.Windows2019: Still creating... [40s elapsed]
aws_instance.Windows2019: Still creating... [50s elapsed]
aws_instance.Windows2019: Still creating... [1m0s elapsed]
aws_instance.Windows2019: Still creating... [1m10s elapsed]
aws_instance.Windows2019: Creation complete after 1m11s [id=i-0558c0324610162fe]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

Windows2019_public_dns = "ec2-18-207-237-149.compute-1.amazonaws.com"
rafael@Niflheim:~/terraform$ terraform show
# aws_instance.Windows2019:
resource "aws_instance" "Windows2019" {
    ami                                  = "ami-077f1edd46ddb3129"
    arn                                  = "arn:aws:ec2:us-east-1:731038382093:instance/i-0558c0324610162fe"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1f"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-0558c0324610162fe"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = "my-key"
    monitoring                           = false
    primary_network_interface_id         = "eni-0171f16997169be98"
    private_dns                          = "ip-172-31-71-142.ec2.internal"
    private_ip                           = "172.31.71.142"
    public_dns                           = "ec2-18-207-237-149.compute-1.amazonaws.com"
    public_ip                            = "18.207.237.149"
    secondary_private_ips                = []
    security_groups                      = [
        "allow_rdp",
        "allow_winrm_http",
        "allow_winrm_https",
    ]
    source_dest_check                    = true
    subnet_id                            = "subnet-f04548fe"
    tags                                 = {
        "Name" = "Windows2019"
    }
    tags_all                             = {
        "Name" = "Windows2019"
    }
    tenancy                              = "default"
    vpc_security_group_ids               = [
        "sg-04091e1c369ea30fc",
        "sg-077a159bc9a89828f",
        "sg-0a403cba2903ea6a6",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_put_response_hop_limit = 1
        http_tokens                 = "optional"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 100
        tags                  = {}
        throughput            = 0
        volume_id             = "vol-07f1816468c8a2d20"
        volume_size           = 30
        volume_type           = "gp2"
    }
}

# aws_key_pair.my-key:
resource "aws_key_pair" "my-key" {
    arn         = "arn:aws:ec2:us-east-1:731038382093:key-pair/my-key"
    fingerprint = "8a:9c:4e:fe:e3:77:25:4f:0c:83:22:9a:c1:d5:e7:b4"
    id          = "my-key"
    key_name    = "my-key"
    key_pair_id = "key-048a204574b5168b7"
    public_key  = <<-EOT
        ---- BEGIN SSH2 PUBLIC KEY ----
        Comment: "imported-openssh-key"
        AAAAB3NzaC1yc2EAAAADAQABAAABAQDHxooM0neA5Dvcuvb8tEGKCtZY4Rl26m7F
        9jPSdX+oeu1Dr7WHC6agQdUTzzUGjXjNzfr/UxpJUrm3qJtmcWRDKU/jnoYmp7Nx
        z/ug+/CxFeVaC+Heax+TI0XvZX6If9YjwkRUvJoOc05+tdocvcoXfaoY0evwX0Cm
        6HEt5ypbgoyuPcNleQnb2xvtNK4fvdUxlUxg+5whlIB61tGsv5URJAM3xRfZeME7
        xDSzLPmrZEssJqhQ1khxrKxtwX02HCthji+JExHJVodQO5dk+tJbjQ2gAjz7PKfF
        mmOULjTtVoY1LN5JCeTfjRvVtiN5EET64jHOxa1pWjr6Ab3PGT65
        ---- END SSH2 PUBLIC KEY ----
    EOT
    tags_all    = {}
}

# aws_security_group.allow_rdp:
resource "aws_security_group" "allow_rdp" {
    arn                    = "arn:aws:ec2:us-east-1:731038382093:security-group/sg-0a403cba2903ea6a6"
    description            = "Allow rdp porta 3389"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-0a403cba2903ea6a6"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "rdp"
            from_port        = 3389
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 3389
        },
    ]
    name                   = "allow_rdp"
    owner_id               = "731038382093"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "allow_rdp"
    }
    tags_all               = {
        "Name" = "allow_rdp"
    }
    vpc_id                 = "vpc-d4abcfa9"
}

# aws_security_group.allow_winrm_http:
resource "aws_security_group" "allow_winrm_http" {
    arn                    = "arn:aws:ec2:us-east-1:731038382093:security-group/sg-077a159bc9a89828f"
    description            = "Allow WinRM porta 5985 http"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-077a159bc9a89828f"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "wimrm"
            from_port        = 5985
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 5985
        },
    ]
    name                   = "allow_winrm_http"
    owner_id               = "731038382093"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "allow_winrm_http"
    }
    tags_all               = {
        "Name" = "allow_winrm_http"
    }
    vpc_id                 = "vpc-d4abcfa9"
}

# aws_security_group.allow_winrm_https:
resource "aws_security_group" "allow_winrm_https" {
    arn                    = "arn:aws:ec2:us-east-1:731038382093:security-group/sg-04091e1c369ea30fc"
    description            = "Allow WinRM porta 5986 https"
    egress                 = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id                     = "sg-04091e1c369ea30fc"
    ingress                = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = "wimrm"
            from_port        = 5986
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 5986
        },
    ]
    name                   = "allow_winrm_https"
    owner_id               = "731038382093"
    revoke_rules_on_delete = false
    tags                   = {
        "Name" = "allow_winrm_https"
    }
    tags_all               = {
        "Name" = "allow_winrm_https"
    }
    vpc_id                 = "vpc-d4abcfa9"
}


Outputs:

Windows2019_public_dns = "ec2-18-207-237-149.compute-1.amazonaws.com"
rafael@Niflheim:~/terraform$
